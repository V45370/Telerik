using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.CodeDom.Compiler;
using Microsoft.CSharp;
using System.Reflection;

public class Course : ICourse
    {
        private string name;
        public string Name
        { 
            get { return this.name; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    throw new ArgumentNullException("Name cant be null.");
                    
                }
                this.name = value;
            }
        }
        //teacher assigned to teach it        
        public ITeacher Teacher { get; set; }
        //IList course program(sequence of topics)
        private IList<string> topics;

        
        public Course(string name,ITeacher teacher)
            
        {
            this.Name = name;
            this.topics = new List<string>();
            this.Teacher = teacher;
        }
           

        public void AddTopic(string topic)
        {
            if (topic==null)
            {
                throw new ArgumentNullException("Topic can't be null.");
            }
            this.topics.Add(topic);
        }
        public override string ToString()
        {
            StringBuilder result = new StringBuilder();
            result.Append("Course: Name=" + this.Name);
            if (this.Teacher != null)
            {
                result.Append("; Teacher=" + this.Teacher.Name);
            }
            if (this.topics.Count > 0)
            {
                result.Append("; Topics=[");
                result.Append(string.Join(", ", this.topics));
                result.Append("]");
            }
            return result.ToString();
            
            
           
        }

        
    }


    public class CourseFactory : ICourseFactory
    {
        public ITeacher CreateTeacher(string name)
        {
            return new Teacher(name);
        }

        public ILocalCourse CreateLocalCourse(string name, ITeacher teacher, string lab)
        {
            return new LocalCourse(name,teacher,lab);
        }

        public IOffsiteCourse CreateOffsiteCourse(string name, ITeacher teacher, string town)
        {
            return new OffsiteCourse(name,teacher,town);
        }
    }


    public interface ICourse
    {
        string Name { get; set; }
        ITeacher Teacher { get; set; }
        void AddTopic(string topic);
        string ToString();
    }


    public interface ICourseFactory
    {
        ITeacher CreateTeacher(string name);
        ILocalCourse CreateLocalCourse(string name, ITeacher teacher, string lab);
        IOffsiteCourse CreateOffsiteCourse(string name, ITeacher teacher, string town);
    }


    public interface ILocalCourse : ICourse
    {
        string Lab { get; set; }
    }


    public interface IOffsiteCourse : ICourse
    {
        string Town { get; set; }
    }


    public interface ITeacher
    {
        string Name { get; set; }
        void AddCourse(ICourse course);
        string ToString();
    }


    public class LocalCourse : Course, ILocalCourse
    {
        private string lab;
        
        public string Lab
        {
            get { return this.lab; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    throw new ArgumentNullException("Lab cant be null.");
                }
                this.lab=value;
            }
        }
        public LocalCourse(string name, ITeacher teacher, string lab)
            : base(name, teacher)
        {
            this.Lab = lab;
        }
        public override string ToString()
        {
            string result = "Local" + base.ToString() + "; Lab=" + this.Lab;
            return result;
        }
                
    }


    public class OffsiteCourse : Course, IOffsiteCourse
    {
        private string town;
        public string Town 
        {
            get { return this.town; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    throw new ArgumentNullException("Town cant be null.");
                }
                this.town = value;
            }
        }
        public OffsiteCourse(string name,ITeacher teacher, string town)
            : base(name,teacher)
        {
            this.Town = town;
        }
        

        public override string ToString()
        {
            string result = "Offsite" + base.ToString() + "; Town=" + this.Town;
            return result;
        }
    }


    public class SoftwareAcademyCommandExecutor
    {
        static void Main()
        {
            string csharpCode = ReadInputCSharpCode();
            CompileAndRun(csharpCode);
        }

        private static string ReadInputCSharpCode()
        {
            StringBuilder result = new StringBuilder();
            string line;
            while ((line = Console.ReadLine()) != "")
            {
                result.AppendLine(line);
            }
            return result.ToString();
        }

        static void CompileAndRun(string csharpCode)
        {
            // Prepare a C# program for compilation
            string[] csharpClass =
            {
                @"using System;
                  using SoftwareAcademy;

                  public class RuntimeCompiledClass
                  {
                     public static void Main()
                     {"
                        + csharpCode + @"
                     }
                  }"
            };

            // Compile the C# program
            CompilerParameters compilerParams = new CompilerParameters();
            compilerParams.GenerateInMemory = true;
            compilerParams.TempFiles = new TempFileCollection(".");
            compilerParams.ReferencedAssemblies.Add("System.dll");
            compilerParams.ReferencedAssemblies.Add(Assembly.GetExecutingAssembly().Location);
            CSharpCodeProvider csharpProvider = new CSharpCodeProvider();
            CompilerResults compile = csharpProvider.CompileAssemblyFromSource(
                compilerParams, csharpClass);

            // Check for compilation errors
            if (compile.Errors.HasErrors)
            {
                string errorMsg = "Compilation error: ";
                foreach (CompilerError ce in compile.Errors)
                {
                    errorMsg += "\r\n" + ce.ToString();
                }
                throw new Exception(errorMsg);
            }

            // Invoke the Main() method of the compiled class
            Assembly assembly = compile.CompiledAssembly;
            Module module = assembly.GetModules()[0];
            Type type = module.GetType("RuntimeCompiledClass");
            MethodInfo methInfo = type.GetMethod("Main");
            methInfo.Invoke(null, null);
        }
    }


    public class Teacher : ITeacher
    {
        private string name;
        private IList<ICourse> courses;

        public string Name
        {
           get  {return this.name;}
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    throw new ArgumentException("Name can't be null.");
                }
                this.name=value;
            }
        }
        public Teacher(string name)
        {
            this.Name = name;
            this.courses = new List<ICourse>();
        }
        
        //IList of courses he teaches
        //public IList<ICourse> Courses { get; set; }
        public void AddCourse(ICourse course)
        {
            if (course==null)
            {
                throw new ArgumentNullException("Course cant be null.");
            }
            this.courses.Add(course);
        }
        public override string ToString()
        {
            StringBuilder result = new StringBuilder();
            result.Append("Teacher: Name=" + this.Name);
            if (this.courses.Count > 0)
            {
                result.Append("; Courses=[");
                result.Append(string.Join(", ", this.courses.Select(c => c.Name)));
                result.Append("]");
            }
            return result.ToString();
        }
    }